# -*- coding: utf-8 -*-
"""Neural Networks 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ew95dzYOP60ikZdk9WyG-SfSt4gZfBZd
"""

# Commented out IPython magic to ensure Python compatibility.
from datetime import datetime
import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

(X_train, y_train), (X_test, y_test)  = keras.datasets.mnist.load_data()

X_train= X_train / 255
X_test = X_test / 255

"""Create sequiential neural network with only one layer that's a Dense layer, with activation function "Sigmoid"""

tb_callbacks = keras.callbacks.TensorBoard(log_dir=f"logs\\{datetime.now().strftime('%Y%m%d-%H%M%S')}", histogram_freq=1)

model = keras.Sequential(
    [keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(64, activation="tanh"),
    keras.layers.Dense(10, activation="sigmoid")
    ]
)

model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"]
)

model.fit(X_train, y_train, epochs=7, callbacks=[tb_callbacks])

model.evaluate(X_test, y_test)

"""Heatmap"""

import seaborn as sn

y_predicted = model.predict(X_test)
y_p_labels = [np.argmax(i) for i in y_predicted]
cn = tf.math.confusion_matrix(labels=y_test, predictions=y_p_labels)

plt.figure(figsize = (10, 8))
sn.heatmap(cn, annot=True, fmt="d")